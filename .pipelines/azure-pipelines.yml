# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: ubuntu-latest

stages:
- stage: Infrastructure
  jobs:
  - job: Plan
    steps:
    - task: AzureKeyVault@2
      inputs:
        azureSubscription: 'Pay-As-You-Go(49c5473a-4747-494e-8cfd-1c6671b3b175)'
        KeyVaultName: 'kmxTerraformKeyVault'
        SecretsFilter: '*'
        RunAsPreJob: true
    - script: |
        mkdir "$(Build.StagingDirectory)/terraform-plans"
    - task: TerraformTaskV3@3
      name: "TerraformInit"
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'Pay-As-You-Go(49c5473a-4747-494e-8cfd-1c6671b3b175)'
        backendAzureRmResourceGroupName: 'TerraformPrereqs'
        backendAzureRmStorageAccountName: 'kmxterraformbackend'
        backendAzureRmContainerName: 'terraform'
        backendAzureRmKey: '$(ArmAccessKey)'
    - task: TerraformTaskV3@3    
      name: "TerraformPlan"
      inputs:
        provider: 'azurerm'
        command: 'plan'
        commandOptions: '-out "$(Build.StagingDirectory)/terraform-plans/tf.plan"'
        environmentServiceNameAzureRM: 'Pay-As-You-Go(49c5473a-4747-494e-8cfd-1c6671b3b175)'
      env:
        TF_VAR_sql_admin_password: $(SQL_ADMIN_PASSWORD)
    - task: AzureCLI@2
      name: "AzLogin"
      inputs:
        azureSubscription: 'Pay-As-You-Go(49c5473a-4747-494e-8cfd-1c6671b3b175)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: 'az login'
    - task: TerraformTaskV3@3
      name: "TerraformApply"
      inputs:
        provider: 'azurerm'
        command: 'apply'
        commandOptions: '$(Build.StagingDirectory)/terraform-plans/tf.plan'
        environmentServiceNameAzureRM: 'Pay-As-You-Go(49c5473a-4747-494e-8cfd-1c6671b3b175)'

      
   